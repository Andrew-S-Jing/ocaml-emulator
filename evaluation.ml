(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
           
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* copy env -- Returns a copied environment with structural equality
       but not physical equality. Useful for updating value pointers without
       affecting upstream pointer contents *)
    val copy : env -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> raise (EvalError ("unbound variable " ^ varname))
      | (var, x) :: tl ->
          if var = varname then !x else lookup tl varname

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      match List.find_opt (fun (var, _pointer) -> var = varname) env with
      | None -> (varname, loc) :: env
      | Some (_var, pointer) -> pointer := !loc; env

    let copy (env : env) : env =
      List.map (fun (var, pointer) -> var, ref !pointer) env

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) ->
          let exp_str = exp_to_concrete_string exp in
          if printenvp then
            let rec to_string' acc e =
              match e with
              | [] -> acc
              | (var, x) :: tl ->
                  to_string' (var ^ " = " ^ value_to_string !x ^ "\n") tl in
            "Expression:" ^ exp_str ^ "\nEnvironment: " ^ to_string' "" env
          else "Expression: " ^ exp_str ^ "\n"

    let env_to_string (env : env) : string =
      let rec to_string' acc e =
        match e with
        | [] -> acc
        | (var, x) :: tl ->
            to_string' (var ^ " = " ^ value_to_string !x ^ "\n") tl in
      to_string' "" env
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

open Env ;;

let eval_t (exp : expr) (_env : env) : value =
  (* coerce the expr, unchanged, into a value *)
  Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let eval_s (exp : expr) (_env : env) : value =
  let rec eval_s' e =
    match e with
    | Var v -> raise (EvalError ("unbound variable: " ^ v))
    | Unit -> Unit
    | Num n ->  Num n
    | Float f -> Float f
    | Bool b -> Bool b
    | Char c -> Char c
    | String s -> String s
    | Unop (op, x) ->
        (match op, eval_s' x with
         | Negate, Num n -> Num ~-n
         | FNegate, Float f -> Float ~-.f
         | Head, List (Elt (hd, _tl)) -> hd
         | Tail, List (Elt (_hd, tl)) -> List tl
         | Negate, _ -> raise (EvalError "(~-) expects type int")
         | FNegate, _ -> raise (EvalError "(~-.) expects type float")
         | Head, _ -> raise (EvalError "head expects type 'a list")
         | Tail, _ -> raise (EvalError "tail expects type 'a list")
         | Ref, _ -> raise (EvalError "eval_s: unexpected Ref")
         | Deref, _ -> raise (EvalError "eval_s: unexpected Deref"))
    | Binop (op, x, y) ->
        (match op, eval_s' x, eval_s' y with
         | Plus, Num a, Num b -> Num (a + b)
         | Minus, Num a, Num b -> Num (a - b)
         | Times, Num a, Num b -> Num (a * b)
         | Divide, Num a, Num b -> Num (a / b)
         | Equals, Num a, Num b -> Bool (a = b)
         | Equals, Float a, Float b -> Bool (a = b)
         | Equals, Bool a, Bool b -> Bool (a = b)
         | LessThan, Num a, Num b -> Bool (a < b)
         | FPlus, Float a, Float b -> Float (a +. b)
         | FMinus, Float a, Float b -> Float (a -. b)
         | FTimes, Float a, Float b -> Float (a *. b)
         | FDivide, Float a, Float b -> Float (a /. b)
         | Concat, String a, String b -> String (a ^ b)
         | Cons, a, List Empty ->
             List (Elt (a, Empty))
         | Cons, a, List (Elt (b, _) as tl) ->
             (match a, b with
              | Unit, Unit
              | Num _, Num _
              | Float _, Float _
              | Bool _, Bool _
              | Char _, Char _
              | String _, String _
              | Fun _, Fun _
              | FunUnit _, FunUnit _
              | List _, List _ -> List (Elt (a, tl))
              | _ -> raise (EvalError "(::) expects type 'a and 'a list"))
         | x, _, _ -> 
             let o, t =
               match x with
               | Plus -> "(+)", "int"
               | Minus -> "(-)", "int"
               | Times -> "( * )", "int"
               | Divide -> "(/)", "int"
               | Equals -> "(=)", "'a for both args"
               | LessThan -> "(<)", "int"
               | FPlus -> "(+.)", "float"
               | FMinus -> "(-.)", "float"
               | FTimes -> "( *. )", "float"
               | FDivide -> "(/.)", "float"
               | Concat -> "(^)", "string"
               | Cons -> "(::)", "'a and 'a list"
               | Assign -> raise (EvalError "eval_s: unexpected Assign") in
             raise (EvalError (o ^ " expects type " ^ t)))
    | Conditional (c, t, f) ->
        (match eval_s' c with
         | Bool b -> if b then eval_s' t else eval_s' f
         | _ ->  raise (EvalError "conditional is expected to be type bool"))
    | Fun (v, x) -> Fun (v, x)
    | FunUnit x -> FunUnit x
    | FunWild x -> FunWild x
    | Let (v, x, y) ->
        let x' = eval_s' x in
        eval_s' (subst v x' y)
    | Letrec (v, x, y) ->
        let x' = eval_s' x in
        eval_s' (subst v (subst v (Letrec (v, x', Var v)) x') y)
    | LetUnit (x, y) ->
        (match eval_s' x with
         | Unit -> eval_s' y
         | _ -> raise (EvalError "let () expected type unit"))
    | LetWild (x, y) -> let _wild = eval_s' x in eval_s' y
    | Raise -> raise EvalException
    | Unassigned -> raise (EvalError "Unassigned constructor called")
    | App (f, x) ->
        let f', x' = eval_s' f, eval_s' x in
        (match f' with
         | Fun (a, b) -> eval_s' (subst a x' b)
         | FunUnit b ->
             if x' = Unit then eval_s' b
             else raise (EvalError "function app expects type unit")
         | FunWild b -> eval_s' b
         | _ -> raise (EvalError "function expected of type 'a -> 'b"))
    | List Empty -> List Empty
    | List (Elt (hd, tl)) ->
        (match eval_s' (List tl) with
         | List x -> eval_s' (Binop (Cons, hd, List x))
         | _ -> raise (EvalError "Cons should be onto type 'a list"))
    | ClosList _ -> raise (EvalError "eval_s: unexpected closure") in
  Val (eval_s' exp) ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : env) : value =
  let eval_d' e = eval_d e env in
  match exp with
  | Var v -> lookup env v
  | Unit -> Val Unit
  | Num n -> Val (Num n)
  | Float f -> Val (Float f)
  | Bool b -> Val (Bool b)
  | Char c -> Val (Char c)
  | String s -> Val (String s)
  | Unop (op, x) ->
      (match op, eval_d' x with
       | Negate, Val (Num n) -> Val (Num ~-n)
       | FNegate, Val (Float f) -> Val (Float ~-.f)
       | Head, Val (List (Elt (hd, _tl))) -> Val hd
       | Tail, Val (List (Elt (_hd, tl))) -> Val (List tl)
       | Negate, _ -> raise (EvalError "(~-) expects type int")
       | FNegate, _ -> raise (EvalError "(~-.) expects type float")
       | Head, _ -> raise (EvalError "head expects type 'a list")
       | Tail, _ -> raise (EvalError "tail expects type 'a list")
       | Ref, _ -> raise (EvalError "eval_d: unexpected Ref")
       | Deref, _ -> raise (EvalError "eval_d: unexpected Deref"))
  | Binop (op, x, y) ->
      (match op, eval_d' x, eval_d' y with
       | Plus, Val (Num a), Val (Num b) -> Val (Num (a + b))
       | Minus, Val (Num a), Val (Num b) -> Val (Num (a - b))
       | Times, Val (Num a), Val (Num b) -> Val (Num (a * b))
       | Divide, Val (Num a), Val (Num b) -> Val (Num (a / b))
       | Equals, Val (Num a), Val (Num b) -> Val (Bool (a = b))
       | Equals, Val (Float a), Val (Float b) -> Val (Bool (a = b))
       | Equals, Val (Bool a), Val (Bool b) -> Val (Bool (a = b))
       | LessThan, Val (Num a), Val (Num b) -> Val (Bool (a < b))
       | FPlus, Val (Float a), Val (Float b) -> Val (Float (a +. b))
       | FMinus, Val (Float a), Val (Float b) -> Val (Float (a -. b))
       | FTimes, Val (Float a), Val (Float b) -> Val (Float (a *. b))
       | FDivide, Val (Float a), Val (Float b) -> Val (Float (a /. b))
       | Concat, Val (String a), Val (String b) -> Val (String (a ^ b))
       | Cons, Val a, Val (List Empty) -> Val (List (Elt (a, Empty)))
       | Cons, Val a, Val (List (Elt (b, _) as tl)) ->
           (match a, b with
            | Unit, Unit
            | Num _, Num _
            | Float _, Float _
            | Bool _, Bool _
            | Char _, Char _
            | String _, String _
            | Fun _, Fun _
            | FunUnit _, FunUnit _
            | List _, List _ -> Val (List (Elt (a, tl)))
            | _ -> raise (EvalError "(::) expects type 'a and 'a list"))
       | x, _, _ ->
           let o, t =
             match x with
             | Plus -> "(+)", "int"
             | Minus -> "(-)", "int"
             | Times -> "( * )", "int"
             | Divide -> "(/)", "int"
             | Equals -> "(=)", "'a for both args"
             | LessThan -> "(<)", "int"
             | FPlus -> "(+.)", "float"
             | FMinus -> "(-.)", "float"
             | FTimes -> "( *. )", "float"
             | FDivide -> "(/.)", "float"
             | Concat -> "(^)", "string"
             | Cons -> "(::)", "'a and 'a list"
             | Assign -> raise (EvalError "eval_d: unexpected Assign") in
           raise (EvalError (o ^ " expects type " ^ t)))
  | Conditional (c, t, f) ->
      (match eval_d' c with
       | Val (Bool b) -> if b then eval_d' t else eval_d' f
       | _ -> raise (EvalError "conditional is expected to be of type bool"))
  | Fun (v, x) -> Val (Fun (v, x))
  | FunUnit x -> Val (FunUnit x)
  | FunWild x -> Val (FunWild x)
  | Let (v, x, y)
  | Letrec (v, x, y) -> eval_d y (extend env v (ref (eval_d' x)))
  | LetUnit (x, y) ->
      (match eval_d' x with
       | Val Unit -> eval_d' y
       | _ -> raise (EvalError "let () expects type unit"))
  | LetWild (x, y) -> let _wild = eval_d' x in eval_d' y
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "evaluated to \"Unassigned\"")
  | App (f, x) ->
      (match eval_d' f, eval_d' x with
       | Val (Fun (v, f')), (Val _ as x') -> 
           eval_d f' (extend env v (ref x'))
       | Val (FunUnit f'), Val unit_ ->
           if unit_ = Unit then eval_d' f'
           else raise (EvalError "Fun app expects type unit")
       | Val (FunWild f'), _wild -> eval_d' f'
       | Val _, _ -> raise (EvalError "Fun should be of type \"Fun\"")
       | _ -> raise (EvalError "eval_d: unexpected closure in dynamic env"))
  | List Empty -> Val (List Empty)
  | List (Elt (hd, tl)) ->
      (match eval_d' hd, eval_d' (List tl) with
       | Val a, Val (List b) -> eval_d' (Binop (Cons, a, List b))
       | Closure _, _
       | _, Closure _ ->
           raise (Failure "eval_d: unexpected closure in dynamic env")
       | _ -> raise (Failure "List should eval to List"))
  | ClosList _ -> raise (Failure "eval_d: unexpected closure") ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (exp : expr) (env : env) : value =
  let eval_l' e = eval_l e env in
  match exp with
  | Var v -> lookup env v
  | Unit -> Val Unit
  | Num n -> Val (Num n)
  | Float f -> Val (Float f)
  | Bool b -> Val (Bool b)
  | Char c -> Val (Char c)
  | String s -> Val (String s)
  | Unop (op, x) ->
      (match op, eval_l' x with
       | Negate, Val (Num n) -> Val (Num ~-n)
       | FNegate, Val (Float f) -> Val (Float ~-.f)
       | Head, Val (List (Elt (hd, _tl))) -> Val hd
       | Head, Closure (ClosList (Elt (hd, _tl)), e) -> lookup e hd
       | Tail, Val (List (Elt (_hd, tl))) -> Val (List tl)
       | Tail, Closure (ClosList (Elt (_hd, tl)), e) ->
           Closure (ClosList tl, e)
       | Negate, _ -> raise (EvalError "(~-) expects type int")
       | FNegate, _ -> raise (EvalError "(~-.) expects type float")
       | Head, _ -> raise (EvalError "head expects type 'a list")
       | Tail, _ -> raise (EvalError "tail expects type 'a list")
       | Ref, _ -> raise (EvalError "eval_l: unexpected Ref")
       | Deref, _ -> raise (EvalError "eval_l: unexpected Deref"))
  | Binop (op, x, y) ->
      (match op, eval_l' x, eval_l' y with
       | Plus, Val (Num a), Val (Num b) -> Val (Num (a + b))
       | Minus, Val (Num a), Val (Num b) -> Val (Num (a - b))
       | Times, Val (Num a), Val (Num b) -> Val (Num (a * b))
       | Divide, Val (Num a), Val (Num b) -> Val (Num (a / b))
       | Equals, Val (Num a), Val (Num b) -> Val (Bool (a = b))
       | Equals, Val (Float a), Val (Float b) -> Val (Bool (a = b))
       | Equals, Val (Bool a), Val (Bool b) -> Val (Bool (a = b))
       | LessThan, Val (Num a), Val (Num b) -> Val (Bool (a < b))
       | FPlus, Val (Float a), Val (Float b) -> Val (Float (a +. b))
       | FMinus, Val (Float a), Val (Float b) -> Val (Float (a -. b))
       | FTimes, Val (Float a), Val (Float b) -> Val (Float (a *. b))
       | FDivide, Val (Float a), Val (Float b) -> Val (Float (a /. b))
       | Concat, Val (String a), Val (String b) -> Val (String (a ^ b))
       | Cons, Val a, Val (List Empty)
       | Cons, Val a, Closure (ClosList Empty, _) ->
           Val (List (Elt (a, Empty)))
       | Cons, Closure a, Val (List Empty)
       | Cons, Closure a, Closure (ClosList Empty, _) ->
           let elt_env = new_varname () in
           Closure (ClosList (Elt (elt_env, Empty)),
                    extend env elt_env (ref (Closure a)))
       | Cons, Val a, Val (List (Elt (b, _) as tl)) ->
           (match a, b with
            | Unit, Unit
            | Num _, Num _
            | Float _, Float _
            | Bool _, Bool _
            | Char _, Char _
            | String _, String _
            | Fun _, Fun _
            | FunUnit _, FunUnit _
            | List _, List _ -> Val (List (Elt (a, tl)))
            | _ -> raise (EvalError "(::) expects type 'a and 'a list"))
       | Cons, Closure (a, aenv),
               Closure (ClosList (Elt (b, _) as tl), benv) ->
           (match a, lookup benv b with
            | Unit, Closure (Unit, _)
            | Num _, Closure (Num _, _)
            | Float _, Closure (Float _, _)
            | Bool _, Closure (Bool _, _)
            | Char _, Closure (Char _, _)
            | String _, Closure (String _, _)
            | Fun _, Closure (Fun _, _)
            | FunUnit _, Closure (FunUnit _, _)
            | List _, Closure (List _, _)
            | ClosList _, Closure (ClosList _, _) ->
                let elt_env = new_varname () in
                Closure (ClosList (Elt (elt_env, tl)),
                         extend env elt_env (ref (Closure (a, aenv))))
            | _ -> raise (EvalError "(::) expects type 'a and 'a list"))
       | x, _, _ ->
           let o, t =
             match x with
             | Plus -> "(+)", "int"
             | Minus -> "(-)", "int"
             | Times -> "( * )", "int"
             | Divide -> "(/)", "int"
             | Equals -> "(=)", "'a for both args"
             | LessThan -> "(<)", "int"
             | FPlus -> "(+.)", "float"
             | FMinus -> "(-.)", "float"
             | FTimes -> "( *. )", "float"
             | FDivide -> "(/.)", "float"
             | Concat -> "(^)", "string"
             | Cons -> "(::)", "'a and 'a list"
             | Assign -> raise (EvalError "eval_l: unexpected Assign") in
           raise (EvalError (o ^ " expects type " ^ t)))
  | Conditional (c, t, f) ->
      (match eval_l' c with
       | Val (Bool b) -> if b then eval_l' t else eval_l' f
       | _ -> raise (EvalError "conditional is expected to be of type bool"))
  | Fun (v, x) -> Closure (Fun (v, x), env)
  | FunUnit x -> Closure (FunUnit x, env)
  | FunWild x -> Closure (FunWild x, env)
  (* Let statement's lexical scoping needs to not be affected by future
     dynamical changes, so the downstream evaluation needs to have different
     value pointers, thus the `Env.copy` result being passed downstream. *)
  | Let (v, x, y) -> eval_l y (extend (copy env) v (ref (eval_l' x)))
  (* Letrec statement here follows the workaround enabled by the `Unassigned`
     constructor of the `Env.value` type *)
  | Letrec (v, x, y) ->
      let rec_pointer = ref (Val Unassigned) in
      let env_lex = extend env v rec_pointer in
      let v_D = eval_l x env_lex in
      rec_pointer := v_D;
      eval_l y env_lex
  | LetUnit (x, y) ->
      (match eval_l' x with
       | Val Unit -> eval_l' y
       | _ -> raise (EvalError "let () expects type unit"))
  | LetWild (x, y) -> let _wild = eval_l' x in eval_l' y
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "evaluated to \"Unassigned\"")
  | App (f, x) ->
      let dynamic = env in
      (match eval_l f dynamic, eval_l x dynamic with
       | Closure (Fun (v, f'), lexical), (Val _ as x') ->
           eval_l f' (extend lexical v (ref x'))
       | Closure (FunUnit f', lexical), Val unit_ ->
           if unit_ = Unit then eval_l f' lexical
           else raise (EvalError "Fun app expects type ()")
       | Closure (FunWild f', lexical), _wild -> eval_l f' lexical
       | Closure _, _ -> raise (EvalError "Fun should be of type \"Fun\"")
       | _ -> raise (Failure "eval_l: expects type \"Fun\" as a closure"))
  | List Empty -> Val (List Empty)
  | List (Elt (hd, tl)) -> eval_l' (Binop (Cons, hd, (List tl)))
  | ClosList _ -> raise (Failure "ClosList is undeclarable")


(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let rec eval_e (exp : expr) (env : env) (store : env) : value * env =
  let eval_e' e = eval_e e env store in
  match exp with
  | Var v -> lookup env v, store
  | Unit -> Val Unit, store
  | Num n -> Val (Num n), store
  | Float f -> Val (Float f), store
  | Bool b -> Val (Bool b), store
  | Char c -> Val (Char c), store
  | String s -> Val (String s), store
  | Unop (op, x) ->
      let x', store' = eval_e' x in
      (match op, x' with
       | Negate, Val (Num n) -> Val (Num ~-n), store'
       | FNegate, Val (Float f) -> Val (Float ~-.f), store'
       | Head, Val (List (Elt (hd, _tl))) -> Val hd, store'
       | Head, Closure (ClosList (Elt (hd, _tl)), e) -> lookup e hd, store'
       | Tail, Val (List (Elt (_hd, tl))) -> Val (List tl), store'
       | Tail, Closure (ClosList (Elt (_hd, tl)), e) ->
           Closure (ClosList tl, e), store'
       | Ref, _ ->
           let refid = new_refname () in
           Val (Var refid), extend store' refid (ref x')
       | Deref, Val (Var loc) ->
           if is_refname loc then lookup store' loc, store'
           else raise (EvalError "(!) expects type 'a ref")
       | Negate, _ -> raise (EvalError "(~-) expects type int")
       | FNegate, _ -> raise (EvalError "(~-.) expects type float")
       | Head, _ -> raise (EvalError "head expects type 'a list")
       | Tail, _ -> raise (EvalError "tail expects type 'a list")
       | Deref, _ -> raise (EvalError "(!) expects type 'a ref"))
  | Binop (op, x, y) ->
      let y', store' = eval_e' y in
      let x', store'' = eval_e x env store' in
      (match op, x', y' with
       | Plus, Val (Num a), Val (Num b) -> Val (Num (a + b)), store''
       | Minus, Val (Num a), Val (Num b) -> Val (Num (a - b)), store''
       | Times, Val (Num a), Val (Num b) -> Val (Num (a * b)), store''
       | Divide, Val (Num a), Val (Num b) -> Val (Num (a / b)), store''
       | Equals, Val (Num a), Val (Num b) -> Val (Bool (a = b)), store''
       | Equals, Val (Float a), Val (Float b) -> Val (Bool (a = b)), store''
       | Equals, Val (Bool a), Val (Bool b) -> Val (Bool (a = b)), store''
       | LessThan, Val (Num a), Val (Num b) -> Val (Bool (a < b)), store''
       | FPlus, Val (Float a), Val (Float b) -> Val (Float (a +. b)), store''
       | FMinus, Val (Float a), Val (Float b) -> Val (Float (a -. b)), store''
       | FTimes, Val (Float a), Val (Float b) -> Val (Float (a *. b)), store''
       | FDivide, Val (Float a), Val (Float b) -> Val (Float (a /. b)), store''
       | Concat, Val (String a), Val (String b) -> Val (String (a ^ b)), store''
       | Cons, Val a, Val (List Empty)
       | Cons, Val a, Closure (ClosList Empty, _) ->
           Val (List (Elt (a, Empty))), store''
       | Cons, Closure a, Val (List Empty)
       | Cons, Closure a, Closure (ClosList Empty, _) ->
           let elt_env = new_varname () in
           Closure (ClosList (Elt (elt_env, Empty)),
                     extend env elt_env (ref (Closure a))),
           store''
       | Cons, Val a, Val (List (Elt (b, _) as tl)) ->
           (match a, b with
             | Unit, Unit
             | Num _, Num _
             | Float _, Float _
             | Bool _, Bool _
             | Char _, Char _
             | String _, String _
             | Fun _, Fun _
             | FunUnit _, FunUnit _
             | List _, List _ -> Val (List (Elt (a, tl))), store''
             | _ -> raise (EvalError "(::) expects type 'a and 'a list"))
       | Cons, Closure (a, aenv),
               Closure (ClosList (Elt (b, _) as tl), benv) ->
           (match a, lookup benv b with
             | Unit, Closure (Unit, _)
             | Num _, Closure (Num _, _)
             | Float _, Closure (Float _, _)
             | Bool _, Closure (Bool _, _)
             | Char _, Closure (Char _, _)
             | String _, Closure (String _, _)
             | Fun _, Closure (Fun _, _)
             | FunUnit _, Closure (FunUnit _, _)
             | List _, Closure (List _, _)
             | ClosList _, Closure (ClosList _, _) ->
                 let elt_env = new_varname () in
                 Closure (ClosList (Elt (elt_env, tl)),
                           extend env elt_env (ref (Closure (a, aenv)))),
                 store''
             | _ -> raise (EvalError "(::) expects type 'a and 'a list"))
       | Assign, Val (Var loc), _ ->
           if is_refname loc then Val Unit, extend store'' loc (ref y')
           else raise (EvalError "(:=) expects type 'a ref and 'a")
       | x, _, _ ->
           let o, t =
             match x with
             | Plus -> "(+)", "int"
             | Minus -> "(-)", "int"
             | Times -> "( * )", "int"
             | Divide -> "(/)", "int"
             | Equals -> "(=)", "'a for both args"
             | LessThan -> "(<)", "int"
             | FPlus -> "(+.)", "float"
             | FMinus -> "(-.)", "float"
             | FTimes -> "( *. )", "float"
             | FDivide -> "(/.)", "float"
             | Concat -> "(^)", "string"
             | Cons -> "(::)", "'a and 'a list"
             | Assign -> "(:=)", "'a ref and 'a" in
           raise (EvalError (o ^ " expects type " ^ t)))
  | Conditional (c, t, f) ->
      (match eval_e' c with
       | Val (Bool b), store' ->
           if b then eval_e t env store' else eval_e f env store'
       | _ -> raise (EvalError "conditional is expected to be of type bool"))
  | Fun (v, x) -> Closure (Fun (v, x), env), store
  | FunUnit x -> Closure (FunUnit x, env), store
  | FunWild x -> Closure (FunWild x, env), store
  (* Let statement's lexical scoping needs to be isolated from the downstream 
     dynamical changes with different value pointers.
     `Env.copy` creates the dynamical environment to be used downstream. *)
  | Let (v, x, y) ->
      let res, store' = eval_e' x in
      eval_e y (extend (copy env) v (ref res)) store'
  (* Letrec statement here follows the workaround enabled by the `Unassigned`
      constructor of the `Env.value` type *)
  | Letrec (v, x, y) ->
      let refid = new_refname () in
      let env' = extend env v (ref (Val (Var refid))) in
      let v_D, store' =
        eval_e (subst v (Unop (Deref, Var v)) x)
                env'
               (extend store refid (ref (Val Unassigned))) in
      eval_e (subst v (Unop (Deref, Var v)) y)
              env'
             (extend store' refid (ref v_D))
  | LetUnit (x, y) ->
      (match eval_e' x with
       | Val Unit, store' -> eval_e y env store'
       | _ -> raise (EvalError "let () expects type unit"))
  | LetWild (x, y) ->
      let _wild, store' = eval_e' x in
      eval_e y env store'
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "evaluated to \"Unassigned\"")
  | App (f, x) ->
      let dynamic = env in
      let x', store' = eval_e x dynamic store in
      let f', store'' = eval_e f dynamic store' in
      (match f', x' with
       | Closure (Fun (v, f'), lexical), (Val _ as x') ->
           eval_e f' (extend lexical v (ref x')) store''
       | Closure (FunUnit f', lexical), Val unit_ ->
           if unit_ = Unit then eval_e f' lexical store''
           else raise (EvalError "Fun app expects type ()")
       | Closure (FunWild f', lexical), _wild -> eval_e f' lexical store''
       | Closure _, _ -> raise (EvalError "Fun should be of type \"Fun\"")
       | _ -> raise (Failure "eval_e: expects type \"Fun\" as a closure"))
  | List Empty -> Val (List Empty), store
  | List (Elt (hd, tl)) -> eval_e' (Binop (Cons, hd, (List tl)))
  | ClosList _ -> raise (Failure "ClosList is undeclarable")
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_e ;;
